#!/usr/bin/perl -w

# ham spots lookup, using pskreporter, reverse beacon network, dxwatch and
# hamspots.net

# 2-clause BSD license.
# Copyright (c) 2018 molo1134@github. All rights reserved.

# for hamspots.net, please use a $HOME/.hamspotlogin with the following
# contents:
#
# $login_callsign="YOURCALL";
# $login_password="xxxxxxxxxxxxxxx";

use strict;
use POSIX qw(floor strftime);
use Text::CSV;
use DateTime::Format::Strptime;
use Switch;
use v5.10;
use JSON qw( decode_json );

use File::Basename;
use Cwd 'realpath';
use lib dirname(realpath(__FILE__));
use Location;
use Util;

my $username = $ENV{'USER'} || $ENV{'USERNAME'} || getpwuid($<);

# configuration
our $exitnonzeroonerror = 1;
$exitnonzeroonerror = 0 if $username eq 'eggdrop';

my $timestampfile = $ENV{'HOME'}.'/.spottimestamps';
my $hamspotloginfile = $ENV{'HOME'}.'/.hamspotlogin';

my $defaultSpots = 20;
my $defaultSpotsForEggdrop = 3;

# end config

# TODO: unicode support?

if ($#ARGV < 0 || length($ARGV[0]) == 0) {
  if ($username eq 'eggdrop') {
    print "usage: !spots [--dxw] [--rbn] [--psk] [--ham] <callsign> [limit]\n";
  } else {
    print "usage: $0 [--dxw] [--rbn] [--psk] [--ham] <callsign> [limit]\n";
  }
  exit $exitnonzeroonerror;
}

my $callsign = undef;
my $i = 0;
my $monitor = 0;

my $limit;
if ($username eq 'eggdrop') {
  $limit = $defaultSpotsForEggdrop;
} else {
  $limit = $defaultSpots;
}

my $psk = 0;
my $dxw = 0;
my $rbn = 0;
my $ham = 0;

# when calling from eggdrop, parameters may be packed into first parameter.
if ($#ARGV == 0 && $ARGV[0] =~ m/ /) {
  @ARGV = split / /, $ARGV[0];
}

while ($i <= $#ARGV) {
  if ($ARGV[$i] =~ /--mon/) {
    # WARNING: monitor mode puts a heavy load on these services.  This will
    # likely get your IP banned if you do it for any length of time.  This is
    # undocumented for a reason.
    $monitor = 1;
    $i++; next;
  }
  if ($ARGV[$i] =~ /--dxw/) {
    $dxw = 1;
    $i++; next;
  }
  if ($ARGV[$i] =~ /--rbn/) {
    $rbn = 1;
    $i++; next;
  }
  if ($ARGV[$i] =~ /--psk/) {
    $psk = 1;
    $i++; next;
  }
  if ($ARGV[$i] =~ /--ham/) {
    $ham = 1;
    $i++; next;
  }
  if (!defined($callsign) and $ARGV[$i] =~ /^\d{3,}$/) {
    # callsign is frequency in khz -- search for matching spot
    $callsign = $ARGV[$i];
    $psk = $ham = 0;
    $dxw = $rbn = 1;
  }
  if (!defined($callsign)) {
    $callsign = uc $ARGV[$i];
    $i++; next;
  }
  if (defined($callsign) && $ARGV[$i] =~ /^\d+$/) {
    $limit = $ARGV[$i];
    $limit = 8 if $limit > 8 and $username eq 'eggdrop';
  }
  $i++;
}

if ($dxw == 0 && $rbn == 0 && $psk == 0 && $ham == 0) {
  $dxw = 1;
  $rbn = 1;
  $psk = 1;
  $ham = 1;
}

$callsign = "" unless defined $callsign;

if (not ($callsign =~ m/^([A-Z0-9]+[0-9]?\/)?[A-Z0-9]+[0-9][A-Z]+(\/[A-Z0-9]+)?$/) and not ($callsign =~ m/^\d{3,}$/)) {
  print "invalid callsign: $callsign\n";
  exit $exitnonzeroonerror;
}

my $lasttimestamp = 0;
my %lasttimes;

if (-e $timestampfile) {
  open (TIMESTAMPS, "<", $timestampfile);
  while (<TIMESTAMPS>) {
    chomp;
    my @data = split /,/;
    $lasttimes{$data[0]} = $data[1];
    if ($data[0] eq $callsign) {
      $lasttimestamp = $data[1];
      #print "last from file: $lasttimestamp\n";
    }
  }
  close TIMESTAMPS;
}

my $lastspot = 0;
my @spots;

doPSKreporter() unless $psk == 0;
doDXWatch(0) unless $dxw == 0;	  # dx watch
doDXWatch(1) unless $rbn == 0;	  # reverse beacon network
doHamspots() unless $ham == 0;

my @sortedspots = sort { $b->{ts} <=> $a->{ts} } @spots;  # descending

show(\@sortedspots);
updatelast();

exit 0;

##############################################################

sub doPSKreporter
{

  my $url = "https://www.pskreporter.info/cgi-bin/pskquery5.pl?encap=0&callback=doNothing&statistics=0&noactive=1&nolocator=1&senderCallsign=$callsign";

# output:
#{"receiverCallsign":"JA8HZL","receiverLocator":"QN02TP","senderCallsign":"JA2HOL","senderLocator":"PM95ie20rh","frequency":10139114,"flowStartSeconds":1461063164,"mode":"JT65","isSender":1,"isReceiver":0,"senderDXCC":"Japan","senderDXCCCode":"JA","senderDXCCLocator":"PM96","senderLotwUpload":"2016-04-10","senderEqslAuthGuar":"A","sNR":-4},

  local $/;   # read entire file -- FIXME: potentially memory hungry
  open (HTTP, '-|', "curl -L -4 -k --max-time 4 --retry 1 -s '$url'");
  my $json = <HTTP>;
  close(HTTP);

  if ($json =~ /The storm clouds are gathering/) {
    print "warning: pskreporter error\n";
    return;
  }
  if ($json =~ /Your IP has made too many requests for the same data too often/) {
    print "warning: pskreporter throttled\n";
    return;
  }
  $json =~ s/^doNothing\(//;
  $json =~ s/\);$//;

  my $j = decode_json($json) or die "parse error: $json\n";

  foreach my $rec (@{$j->{receptionReport}}) {

    $rec->{frequency} = 0 unless defined $rec->{frequency};
    $rec->{mode} = "?" unless defined $rec->{mode};
    $rec->{flowStartSeconds} = 0 unless defined $rec->{flowStartSeconds};

    my $msg = "";
    $msg .= "$rec->{mode} " if defined $rec->{mode};
    $msg .= "$rec->{sNR} dB " if defined $rec->{sNR};
    $rec->{receiverLocator} = substr($rec->{receiverLocator},0,6) # \
      if defined $rec->{receiverLocator} and length($rec->{receiverLocator}) > 6;
    if (defined($rec->{receiverLocator}) && defined($rec->{senderLocator})) {
      $msg .= "($rec->{receiverLocator} " .
	      sprintf("%.0f km)",
		gridDist($rec->{senderLocator}, $rec->{receiverLocator}));

    } elsif (defined $rec->{receiverLocator}) {
      $msg .= "from $rec->{receiverLocator}";
    }

    push (@spots, {ts => $rec->{flowStartSeconds},
		    src => "p",
		    de => $rec->{receiverCallsign},
		    dx => $rec->{senderCallsign},
		    f => floor($rec->{frequency}/1000),
		    msg => $msg});
#	printf "%-7s %-7s %5d %-28s %s\n",
#		$rec->{receiverCallsign},
#		$rec->{senderCallsign},
#		floor($rec->{frequency}/1000),
#		$rec->{mode} . " " . $rec->{sNR},
#		strftime("%H%Mz %d %b", gmtime($rec->{flowStartSeconds}));

  #      print "$rec->{receiverCallsign}\t$rec->{senderCallsign}\t" .
  #	    floor($rec->{frequency}/1000)."\t$rec->{mode} $rec->{sNR}\t" .
  #	    strftime("%H:%Mz %b %d", gmtime($rec->{flowStartSeconds})) . "\n";
    $lastspot = $rec->{flowStartSeconds} unless
	  ($rec->{flowStartSeconds} < $lastspot);
  }
}


sub doDXWatch
{
  my $rb = shift;
  if (!defined($rb)) {
    $rb = 0;
  }

  my $freqmode = 0;
  $freqmode = 1 if $callsign =~ m/^\d+$/;
  my @seencalls;

  my $url;
  my $referer;
  if ($freqmode == 0) {
    if ($rb == 0) {
      $url = 'https://www.dxwatch.com/dxsd1/s.php?s=0&r=50&cdx=' . $callsign;
      $referer = "https://dxwatch.com/dxsd1/dxsd1.php?f=0&c=$callsign&t=dx";
    } else {
      $url = 'http://www.reversebeacon.net/dxsd1/sk.php?s=0&r=15&cdx=' . $callsign;
      $referer = "http://reversebeacon.net/dxsd1/dxsd1.php?f=0&c=$callsign&t=dx";
    }
  } else {
    # frequency mode
    if ($rb == 0) {
      $url = "https://dxwatch.com/dxsd1/s.php?s=0&r=100&d=1&fid=0";
      $referer = "https://dxwatch.com/";
    } else {
      $url = "http://reversebeacon.net/dxsd1/sk.php?s=0&r=100&d=1&fid=0";
      $referer = "http://reversebeacon.net/main.php";
    }
  }

  my $modes_ref = {
    1 => "cw",
    2 => "phone",
    3 => "cw bcn",
    4 => "cw bcn",
    5 => "cw ncdxf bcn",
    10 => "psk31",
    11 => "rtty",
    12 => "bpsk",
    13 => "gmsk",
    14 => "fsk",
    15 => "sstv",
    16 => "mfsk",
    17 => "qpsk",
    21 => "jt65",
    22 => "hell",
    23 => "dominoex",
    24 => "mt63",
    25 => "rttym",
    26 => "thor",
    27 => "throb",
    28 => "olivia",
    29 => "contestia",
    30 => "psk63",
    31 => "psk125",
    32 => "jt9",
    33 => "opera",
    34 => "ft8",
    35 => "?",
    };
  my %modes = %$modes_ref;

  my $csv = Text::CSV->new({ sep_char => ',' });
  my $dtparser = DateTime::Format::Strptime->new(
    #see strftime
    pattern => '%H%Mz %d %b %Y',
    time_zone => 'UTC',
    on_error => 'undef');

  my $maxdate = 0;
  #open (HTTP, '-|', "cat dxwatch-$callsign.json");
  #open (HTTP, '-|', "cat rb-N7XM.json");
  #print "$url\n";
  local $/;   # read entire file -- FIXME: potentially memory hungry
  my $curl = "curl -L -k --max-time 4 --retry 1 -s '$url'";
  $curl .= " -H 'Referer: $referer'" if defined $referer;
  open (HTTP, '-|', $curl);
  my $json = <HTTP>;
  close(HTTP);

  if ($json =~ /<title>(\d\d\d .*?)<\/title>/) {
    my $error = $1;
    print "warning: ", $rb == 1 ? "RBN" : "DXW", ": $error\n";
    return;
  }
  return if $json eq "";

  my $j = decode_json($json) or die "parse error: $json\n";
  foreach my $s (keys %{$j->{s}}) {
    #print join(",", @{$j->{s}->{$s}}), "\n";
    my ($de, $freq, $dx, $snr, $wpm, $datetime, $age, $cmt, $mode);
    if ($freqmode == 0) {
      if ($rb == 1) {
	($de, $freq, $dx, $snr, $wpm, $datetime, $age, undef, undef, $mode) = @{$j->{s}->{$s}};
	$cmt = "$snr dB, $wpm wpm";
	#print "$mode\n";
	$cmt = "$modes{$mode} $cmt" if defined $mode;
      } else {
	($de, $freq, $dx, $cmt, $datetime, $age) = @{$j->{s}->{$s}};
	$cmt = decodeEntities($cmt);
      }
    } else {
      $cmt = "";
      if ($rb == 0) {
	# AA4U,7047.5,KB1EFS,FT4 +02dB from FN42 514Hz,0230z 23 Dec,2726,12,1
	($de, $freq, $dx, $cmt, $datetime) = @{$j->{s}->{$s}};
      }
      if ($rb == 1) {
	# W3UA,7011.9,E79Q,5,34,0319z 23 Dec,38,12,1,1,0
	($de, $freq, $dx, $snr, $wpm, $datetime, undef, undef, $mode) = @{$j->{s}->{$s}};
	$cmt = "$snr dB, $wpm wpm";
	$cmt = "$modes{$mode} $cmt" if defined $mode;
      }
    }

    my ($ts, $dt);

    if (defined $age && isNumeric($age) && $age > 0) {
      $ts = time() - $age;
    } else {
      $datetime =~ /.*\s(\d+)\s+(\w+)$/;
      $dt = $dtparser->parse_datetime(
	  $datetime . " " . getyearformonthday($2, $1));

      $ts = $dt->epoch();
    }

    if (defined($ts)) {
      #say "timestamp: $ts";
      $lastspot = $ts unless ($ts < $lastspot);
    }

    my $seen = scalar(grep { /^$dx$/ } @seencalls);
    #print("seen: $seen : $dx : @seencalls\n");

    if ($freqmode == 0 or
	($freqmode == 1 and
	  ($freq > $callsign - 5) and
	  ($freq < $callsign + 5) and
	  $seen == 0))
    {
      push (@spots, {ts => $ts,
		      src => (($rb == 1) ? "r" : "d"),
		      de => $de,
		      dx => $dx,
		      f => $freq,
		      msg => substr($cmt, 0, 28)}
		    );
      push (@seencalls, $dx);
    }

    #printf "%-7s %-7s %5d %-28s %s\n", $de, $dx, $freq, substr($cmt, 0, 28), $datetime;
  }
  close HTTP;
}

sub getyearformonthday
{
  my ($monthabbr, $day) = @_;
  my $num;
  switch ($monthabbr) {
    case "Jan" { $num = 1 }
    case "Feb" { $num = 2 }
    case "Mar" { $num = 3 }
    case "Apr" { $num = 4 }
    case "May" { $num = 5 }
    case "Jun" { $num = 6 }
    case "Jul" { $num = 7 }
    case "Aug" { $num = 8 }
    case "Sep" { $num = 9 }
    case "Oct" { $num = 10 }
    case "Nov" { $num = 11 }
    case "Dec" { $num = 12 }
    else       { say "unknown month: $monthabbr" }
  }
  my $now = DateTime->now(time_zone => 'UTC');
  my $currmonthnum = $now->month();
  if ($num < $now->month() ||
      ($num == $now->month() && $day <= $now->day())) {
    return $now->year();
  } else {
    return $now->year() - 1;
  }
}

sub doHamspots
{
  my $baseurl = "https://hamspots.net/";
  our $historyurl = $baseurl . "history";
  our $cookiefile = $ENV{'HOME'}."/.hamspotcookies";

  my $needlogin = 0;
  my $token;

  if (! -e ($hamspotloginfile)) {
    print "warning: hamspots disabled\n";
    return;
  }

  if (! -e $cookiefile) {
    doHamspotsLogin();
  }

getHistory:
  #print "getHistory: $historyurl\n";
#  open(HTTP, '-|', "wget --timeout=4 -t 1 -q -O - --keep-session-cookies " .
#		    "--save-cookies $cookiefile --load-cookies $cookiefile " .
#		    "'$historyurl'");
  open(HTTP, '-|', "curl -k -L --max-time 4 --retry 1 -s --cookie-jar $cookiefile " .
	  "--cookie $cookiefile " .
	  "--user-agent 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2718.0 Safari/537.36' " .
	  "'$historyurl'");
  while (<HTTP>) {
    chomp;
    #print;
    if (/You must be logged in/) {
      $needlogin = 1;
    }
  }
  close HTTP;

  if ($needlogin != 0) {
    doHamspotsLogin();
    $needlogin = 0;
    goto getHistory;
  }

  my $bands_ref = {
    2200 => 137,
    630 => 470,
    600 => 470,
    160 => 1800,
    80 => 3500,
    60 => 5300,
    40 => 7000,
    30 => 10100,
    20 => 14000,
    17 => 18068,
    15 => 21000,
    12 => 24890,
    10 => 28000,
    6 => 50000,
    2 => 144000};
  my %freqs = %$bands_ref;

  #print "get: $historyurl\n";
  open(HTTP, '-|', "curl -k -L --max-time 4 -s --cookie-jar $cookiefile " .
	  "--cookie $cookiefile --referer $historyurl " .
	  "--data 'a=call_data&hist_call_1=$callsign&submit_call=Search' " .
	  "--user-agent 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2718.0 Safari/537.36' " .
	  "'$historyurl'");
  #open(HTTP, '-|', "wget --timeout=4 -t 1 -q -O - --keep-session-cookies " .
  #  "--post-data 'a=call_data&hist_call_1=$callsign&submit_call=Search' " .
  #  "--referer=$historyurl " .
  #  "--save-cookies $cookiefile --load-cookies $cookiefile '$historyurl'");

#  curl 'http://hamspots.net/history/' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' -H 'Accept-Encoding: gzip, deflate' -H 'Accept-Language: en-US,en;q=0.5' -H 'Connection: keep-alive' -H 'Cookie: PHPSESSID=49fa035286fe901952cce444f8ff8287; uid=1f21e6475cfc7687d390446c7d23c027' -H 'DNT: 1' -H 'Host: hamspots.net' -H 'Referer: http://hamspots.net/history/' -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:40.0) Gecko/20100101 Firefox/40.0 Iceweasel/40.0.3' -H 'Content-Type: application/x-www-form-urlencoded' --data 'hist_call_1=IK5PVX&submit_call=Search&a=call_data'

  my $inSpottedBy = 0;
  my $now = time();
  while (<HTTP>) {
    #chomp;
    #print;
    if (/Spotted by/) {
      $inSpottedBy = 1;
    }
    if ( $inSpottedBy == 1 && /tr class="(odd|evn)"/ ) {
      #print;
      my ($src, $age, $de, $st, $ctry, $band, $mode, $sig, $delta) =
        m/<td>(.*?)<\/td><td>(\+?.*?[mshd])<\/td><td.*?>(.*?)<\/td><td>(.*?)<\/td><td class="l">(.*?)<\/td><td>(\d*)<\/td><td>(.*?)<\/td><td>([-+0-9]*)<\/td><td>(.*?)<\/td><\/tr>/;
      #print "src:$src age:$age de:$de ctry:$ctry st:$st band:$band sig:$sig mode:$mode delta:$delta\n" if defined($src);
      #print "$_\n" unless defined($src);

      $st = ""	  if defined($st)     && $st    =~ /nbsp/;
      $delta = "" if defined($delta)  && $delta =~ /nbsp/;
      $sig = ""   if defined($sig)    && $sig   =~ /nbsp/;

      my $ts;
      if (defined($age)) {
	if ($age =~ /(\d+)s/) {
	  $age = $1;
	} elsif ($age =~ /(\d+)m/) {
	  $age = $1;
	  $age *= 60;
	} elsif ($age =~ /(\d+)h/) {
	  $age = $1;
	  $age *= 60 * 60;
	} elsif ($age =~ /(\d+)d/) {
	  $age = $1;
	  $age *= 60 * 60 * 24;
	}
	$ts = $now - $age;
	$lastspot = $ts unless ($ts < $lastspot);
      }

      if (defined ($sig) && $sig eq "&nbsp;") {
	$sig = undef;
      }
      my $msg = "";

      $msg .= "$mode" unless !defined($mode);
      $msg .= " $sig dB" if (defined($sig) && length($sig) > 0);
      $msg .= " DT $delta" if (defined($delta) && length($delta) > 0);
      $msg .= " ($st)" if (defined($st) && length($st) > 0);

      if (defined($de) && defined($ts) && defined($band)) {
	push (@spots, {ts => $ts,
		      src => "h",
		      de => $de,
		      dx => $callsign,
		      f => $freqs{$band},
		      msg => $msg }
		  );
      }
    }
  }
  close HTTP;
}

sub doHamspotsLogin
{
  our $cookiefile;
  our $historyurl;
  our $login_callsign = undef;
  our $login_password = undef;

  if (-e ($hamspotloginfile)) {
	  #chmod 0600, $hamspotloginfile;
    require($hamspotloginfile);
  } else {
    say "warning: unable to read file $hamspotloginfile";
    return;
  }

  #print "login: $historyurl\n";
#  open(HTTP, '-|', "wget --timeout=4 -t 1 -q -O - --keep-session-cookies " .
#    "--post-data " .
#    "'loginCall=$login_callsign&loginPass=$login_password&a=login&p=history' " .
#    "--save-cookies $cookiefile '$historyurl'");
  open(HTTP, '-|', "curl -k -L --max-time 4 --retry 1 -s --cookie-jar $cookiefile " .
	  "--cookie $cookiefile " .
	  "--data 'loginCall=$login_callsign&loginPass=$login_password&a=login&p=history&submit=Log+In' " .
	  "--user-agent 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2718.0 Safari/537.36' " .
	  "'$historyurl'");
  while (<HTTP>) {
    #print;
  }
  close HTTP;
}

sub show
{
  my ($array) = @_;
  my $i = 0;
  if ((scalar @$array) == 0 and $monitor == 0) {
    say "no spots found for $callsign";
  }
  foreach my $spotref (@$array) {
    my %spot = %$spotref;
    if ($monitor == 1 and $spot{ts} <= $lasttimestamp) {
      #print "skipping: ";
      #printf "%-7s %-7s %5d %-28s %s %s\n", $spot{de}, $spot{dx}, $spot{f}, $spot{msg}, strftime("%H%Mz %d %b", gmtime($spot{ts})), $spot{src};
      next;
    }
    #printf "debug: %d, %d: %s\n", $lasttimestamp, $spot{ts}, strftime("%H%Mz %d %b", gmtime($spot{ts}));
    printf "%-7s %-7s %5d %-28s %s %s\n", $spot{de}, $spot{dx}, $spot{f}, $spot{msg}, strftime("%H%Mz %d %b", gmtime($spot{ts})), $spot{src};
    if (++$i >= $limit) {
      last;
    }
  }
}

sub updatelast
{
  #print "lastspot: $lastspot\n";
  open (TIMESTAMPS, ">", $timestampfile);

  foreach my $call (sort keys %lasttimes) {
    if ($call ne $callsign) {
      print TIMESTAMPS "$call,$lasttimes{$call}\n";
    }
  }

  $lastspot = 0 unless defined $lastspot;
  $lasttimes{$callsign} = 0 unless defined $lasttimes{$callsign};

  $lastspot = ($lastspot < $lasttimes{$callsign}) ?
			  $lasttimes{$callsign} : $lastspot;
  print TIMESTAMPS "$callsign,$lastspot\n";
  close TIMESTAMPS;
}

sub gridDist {
  # convert from grids to coords
  my $origCoords = gridToCoord(shift);
  my $foreignCoords = gridToCoord(shift);

  if (!defined($origCoords) || !defined($foreignCoords)) {
    return -1;
  }

  # convert to radians
  my ($origLat, $origLon) = split(/,/, $origCoords);
  my ($foreignLat, $foreignLon) = split(/,/, $foreignCoords);

  my ($dist, undef) = distBearing($origLat, $origLon, $foreignLat, $foreignLon);

  return $dist;
}


# vim: set ts=8 sw=2 sts=2
